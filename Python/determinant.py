import numpy as np
import random
from numpy.linalg import det
from copy import deepcopy

def determinant(A,N, err):
    det = 1
    for rc in xrange(0,N):
        #swap rows
        if abs(A[rc][rc]) < err:
            #print "swapping rows"
            new_col = None
            for i in xrange(rc+1,N):
                if abs(A[i][rc]) > err:
                    new_col = i
                    break

            if new_col != None:
                det = det * -1.
                for i in xrange(0,N):
                    temp = A[rc][i]
                    A[rc][i] = A[new_col][i]
                    A[new_col][i] = temp

        for row_below in xrange(rc+1,N):
            if abs(A[row_below][rc]) > err:
                val = A[row_below][rc]/A[rc][rc]
                for i in xrange(0,N):
                    A[row_below][i] -= val*A[rc][i]

    for i in xrange(0,N):
        det *= A[i][i]

    return det

def generate_matrix(N,a,b):
    return [[float(random.randint(a,b)) for i in range(N)] for j in range(N)]

def test(num_tests, N, a, b, err):
    for i in xrange(0, num_tests):
        A = generate_matrix(N,a,b)

        my_det = determinant(deepcopy(A),N, err)
        np_det = det(np.array(deepcopy(A)))
        
        val1 = abs(my_det) < err
        val2 = abs(np_det) < err
        #print my_det
        #print np_det
        if val1 != val2:
            print "TEST FAILED"
            print A
            print my_det
            print np_det
            break
        else:
            print "TEST SUCCEEDED"


def specific_test():
    A = [[0.000000,235.000000,0.000000,0.000000,0.000000,0.000000,184.000000,321.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000],
[-235.000000,0.000000,0.000000,184.000000,0.000000,0.000000,0.000000,0.000000,260.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000],
[0.000000,0.000000,0.000000,0.000000,0.000000,38.000000,0.000000,0.000000,0.000000,0.000000,350.000000,0.000000,0.000000,0.000000,166.000000,0.000000,0.000000,0.000000,0.000000,0.000000],
[0.000000,-184.000000,0.000000,0.000000,0.000000,77.000000,0.000000,0.000000,0.000000,349.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000],
[0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,244.000000,0.000000,0.000000,38.000000,312.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000],
[0.000000,0.000000,-38.000000,-77.000000,0.000000,0.000000,0.000000,311.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000],
[-184.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,251.000000,145.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000],
[-321.000000,0.000000,0.000000,0.000000,-244.000000,-311.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000],
[0.000000,-260.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,195.000000,68.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000],
[0.000000,0.000000,0.000000,-349.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,40.000000,215.000000,0.000000,0.000000,0.000000,0.000000,0.000000],
[0.000000,0.000000,-350.000000,0.000000,-38.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,3.000000,0.000000,0.000000,0.000000,0.000000],
[0.000000,0.000000,0.000000,0.000000,-312.000000,0.000000,-251.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,393.000000,0.000000,0.000000,0.000000],
[0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,-145.000000,0.000000,-195.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,213.000000,0.000000,0.000000],
[0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,-68.000000,-40.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,283.000000,0.000000],
[0.000000,0.000000,-166.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,-215.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,224.000000],
[0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,-3.000000,0.000000,0.000000,0.000000,0.000000,0.000000,352.000000,0.000000,0.000000,61.000000],
[0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,-393.000000,0.000000,0.000000,0.000000,-352.000000,0.000000,57.000000,0.000000,0.000000],
[0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,-213.000000,0.000000,0.000000,0.000000,-57.000000,0.000000,271.000000,0.000000],
[0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,-283.000000,0.000000,0.000000,0.000000,-271.000000,0.000000,325.000000],
[0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,-224.000000,-61.000000,0.000000,0.000000,-325.000000,0.000000]]

    np_A = deepcopy(np.array(A))
    print determinant(A, len(A), 10**-6)
    print det(np_A)

#specific_test()
#test(1000,40,0,1,10**-6)         

